From the public key in hitbctf.crt we get the modulus 0xe6eb89c18d49c9a2022be0b465146e0f90451ea34c6b6056004ebd155955b13596c2d683ad2f236b0b2c0e0b8883b5d6cb8a0b4ff9b7eb648c952b6bef5a6f04f56417f51ca914d9ea73e7ddc5f20dcec39ce84b722a0cf3d85e80ce786463e144f61db59ccf45ff0ed37fd0cebd37a58d8a4b08339ea32cbcab616403fd2cc5 = 162157588231432175750266419709084494256738149198416702818838192688585199555839792754739411546929869488574731499231574687207152393171517768019327338646577588312972543620665360591059281057979460340279244616489314862289312195704820435867259965443285749719682327313893490163672147378911558526315013166594183212229

Together with the public exponent e = 0x69602d938a815f14cf9fb836c2e04d4dde82bafc8d56c26d8c89ef3c40695dd5d4efa7363643151495f38cbf24ae943092407912001b17f553339e92707049 = 21558488234539889837938770635971330903489839146766895224490179041465516193145582266963154883831707522081140734421052039099233464837201660281606980530249 also found in the certificate we can reconstruct the corresponding private key.

First we factor the modulus via

./factor.py 162157588231432175750266419709084494256738149198416702818838192688585199555839792754739411546929869488574731499231574687207152393171517768019327338646577588312972543620665360591059281057979460340279244616489314862289312195704820435867259965443285749719682327313893490163672147378911558526315013166594183212229 21558488234539889837938770635971330903489839146766895224490179041465516193145582266963154883831707522081140734421052039099233464837201660281606980530249

By construction, p,q and e are such that  N = p+q (mod e). Note that if we would know s:=p+q, we can recover p and q by solving a quadratic equation since we also know N = pq -> either p or q will be (s + sqrt(s*s - 4*N))/2. However we know s0 := s (mod e), so we simply try s0, s0+e, s0+2e, s0+3e,... until we hit the correct value for s.  

This gives 

[+] factored n in 1183 iterations
[+] p = 13317713478157317654574552532079837937895228108820477140030796245493222349714497856652987583926206280627498615972491072112647669795345566943409669535038641
[+] q = 12176083266650126897170100375931110708350668494730113414987801764299563774952801449439933220072280766145748279998832962142839152786620322097065894585706069

Then the corresponding private key can be reconstructed, as is done in privkey.pem. Now we can decrypt mail.msg via the following openssl cmd

openssl smime -decrypt -in mail.msg -inkey privkey.pem -out flag.dec

The flag can now be read from flag.dec:

hitb{0b21cc2025534dbd2965390d2bcef45d}

NOTE: This RSA parameter generation algorithm was actually published in 2003 in a paper called "An algorithm to obtain an RSA modulus with a large private key" by L. Hernández Encinas, J. Muñoz Masqué and A. Queiruga Dios. It has been analyzed in a.o. a 2011 paper called "Security Analysis of an RSA Key Generation Algorithm with a Large Private Key" by Fanyu Kong, Jia Yu and Lei Wu. We have used the easy case by chossing a rather large e. 
